{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kn-sock","text":"<p>A simplified socket programming toolkit for Python.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>TCP/UDP Messaging: Supports both synchronous and asynchronous communication.</li> <li>JSON Socket Communication: Easily send and receive JSON data over sockets.</li> <li>File Transfer over TCP: Transfer files between clients and servers.</li> <li>Threaded/Multi-Client Support: Handle multiple clients concurrently.</li> <li>Command-Line Interface: Simple CLI for quick socket operations.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install kn-sock\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#tcp-messaging","title":"TCP Messaging","text":""},{"location":"#synchronous-tcp-server","title":"Synchronous TCP Server","text":"<pre><code>from kn_sock import start_tcp_server\n\ndef handle_tcp_message(data, addr, client_socket):\n    \"\"\"\n    Handle incoming TCP messages.\n\n    Args:\n        data (bytes): The data received from the client.\n        addr (tuple): The address of the client.\n        client_socket (socket.socket): The client socket.\n    \"\"\"\n    print(f\"Received from {addr}: {data.decode('utf-8')}\")\n    client_socket.sendall(b\"Message received\")\n\nstart_tcp_server(8080, handle_tcp_message)\n</code></pre>"},{"location":"#synchronous-tcp-client","title":"Synchronous TCP Client","text":"<pre><code>from kn_sock import send_tcp_message\n\nsend_tcp_message(\"localhost\", 8080, \"Hello, World!\")\n</code></pre>"},{"location":"#asynchronous-tcp-server","title":"Asynchronous TCP Server","text":"<pre><code>import asyncio\nfrom kn_sock import start_async_tcp_server\n\nasync def handle_tcp_message(data, addr, writer):\n    \"\"\"\n    Handle incoming TCP messages asynchronously.\n\n    Args:\n        data (bytes): The data received from the client.\n        addr (tuple): The address of the client.\n        writer (asyncio.StreamWriter): The writer object for the client.\n    \"\"\"\n    print(f\"Received from {addr}: {data.decode('utf-8')}\")\n    writer.write(b\"Message received\")\n    await writer.drain()\n\nasyncio.run(start_async_tcp_server(8080, handle_tcp_message))\n</code></pre>"},{"location":"#asynchronous-tcp-client","title":"Asynchronous TCP Client","text":"<pre><code>import asyncio\nfrom kn_sock import send_tcp_message_async\n\nasyncio.run(send_tcp_message_async(\"localhost\", 8080, \"Hello, World!\"))\n</code></pre>"},{"location":"#udp-messaging","title":"UDP Messaging","text":""},{"location":"#synchronous-udp-server","title":"Synchronous UDP Server","text":"<pre><code>from kn_sock import start_udp_server\n\ndef handle_udp_message(data, addr, server_socket):\n    \"\"\"\n    Handle incoming UDP messages.\n\n    Args:\n        data (bytes): The data received from the client.\n        addr (tuple): The address of the client.\n        server_socket (socket.socket): The server socket.\n    \"\"\"\n    print(f\"Received from {addr}: {data.decode('utf-8')}\")\n\nstart_udp_server(8080, handle_udp_message)\n</code></pre>"},{"location":"#synchronous-udp-client","title":"Synchronous UDP Client","text":"<pre><code>from kn_sock import send_udp_message\n\nsend_udp_message(\"localhost\", 8080, \"Hello, World!\")\n</code></pre>"},{"location":"#asynchronous-udp-server","title":"Asynchronous UDP Server","text":"<pre><code>import asyncio\nfrom kn_sock import start_udp_server_async\n\nasync def handle_udp_message(data, addr, transport):\n    \"\"\"\n    Handle incoming UDP messages asynchronously.\n\n    Args:\n        data (bytes): The data received from the client.\n        addr (tuple): The address of the client.\n        transport (asyncio.DatagramTransport): The transport object for the client.\n    \"\"\"\n    print(f\"Received from {addr}: {data.decode('utf-8')}\")\n\nasyncio.run(start_udp_server_async(8080, handle_udp_message))\n</code></pre>"},{"location":"#asynchronous-udp-client","title":"Asynchronous UDP Client","text":"<pre><code>import asyncio\nfrom kn_sock import send_udp_message_async\n\nasyncio.run(send_udp_message_async(\"localhost\", 8080, \"Hello, World!\"))\n</code></pre>"},{"location":"#json-socket-communication","title":"JSON Socket Communication","text":""},{"location":"#json-server","title":"JSON Server","text":"<pre><code>from kn_sock import start_json_server\n\ndef handle_json_message(data, addr, client_socket):\n    \"\"\"\n    Handle incoming JSON messages.\n\n    Args:\n        data (dict): The JSON data received from the client.\n        addr (tuple): The address of the client.\n        client_socket (socket.socket): The client socket.\n    \"\"\"\n    print(f\"Received from {addr}: {data}\")\n    client_socket.sendall(b'{\"status\": \"received\"}')\n\nstart_json_server(8080, handle_json_message)\n</code></pre>"},{"location":"#json-client","title":"JSON Client","text":"<pre><code>from kn_sock import send_json\n\nsend_json(\"localhost\", 8080, {\"message\": \"Hello, World!\"})\n</code></pre>"},{"location":"#file-transfer-over-tcp","title":"File Transfer over TCP","text":""},{"location":"#file-server","title":"File Server","text":"<pre><code>from kn_sock import start_file_server\n\nstart_file_server(8080)\n</code></pre>"},{"location":"#file-client","title":"File Client","text":"<pre><code>from kn_sock import send_file\n\nsend_file(\"localhost\", 8080, \"path/to/your/file.txt\")\n</code></pre>"},{"location":"#live-streaming","title":"Live Streaming","text":"<p>The <code>kn_sock</code> library supports live video and audio streaming from a video file to multiple clients, using both Python API and CLI.</p> <p>Note: For best compatibility, use video files encoded as mp4 (H.264). Some formats (e.g., AV1) may not be supported by your OpenCV/FFmpeg installation.</p>"},{"location":"#live-stream-server-python","title":"Live Stream Server (Python)","text":"<pre><code>from kn_sock import start_live_stream\n\n# Start a live stream server on port 9000, streaming from a video file\nstart_live_stream(9000, \"/path/to/video.mp4\")\n</code></pre>"},{"location":"#live-stream-client-python","title":"Live Stream Client (Python)","text":"<pre><code>from kn_sock import connect_to_live_server\n\n# Connect to a live stream server at 192.168.1.10:9000\nconnect_to_live_server(\"192.168.1.10\", 9000)\n</code></pre>"},{"location":"#live-streaming-via-cli","title":"Live Streaming via CLI","text":"<ul> <li>Start a live stream server:</li> </ul> <pre><code>kn-sock run-live-server 9000 /path/to/video.mp4\n# Optional: --host 0.0.0.0 --audio-port 9001\n</code></pre> <ul> <li>Connect as a live stream client:</li> </ul> <pre><code>kn-sock connect-live-server 192.168.1.10 9000\n# Optional: --audio-port 9001\n</code></pre>"},{"location":"#command-line-interface","title":"Command-Line Interface","text":"<p>The <code>kn-sock</code> library comes with a simple CLI for quick socket operations. You can use the following commands:</p> <ul> <li>Send TCP Message:</li> </ul> <pre><code>kn-sock send-tcp localhost 8080 \"Hello, World!\"\n</code></pre> <ul> <li>Start TCP Server:</li> </ul> <pre><code>kn-sock run-tcp-server 8080\n</code></pre> <ul> <li>Send UDP Message:</li> </ul> <pre><code>kn-sock send-udp localhost 8080 \"Hello, World!\"\n</code></pre> <ul> <li>Start UDP Server:</li> </ul> <pre><code>kn-sock run-udp-server 8080\n</code></pre> <ul> <li>Send File:</li> </ul> <pre><code>kn-sock send-file localhost 8080 path/to/your/file.txt\n</code></pre> <ul> <li>Start File Server:</li> </ul> <pre><code>kn-sock run-file-server 8080 /path/to/save/directory\n</code></pre>"},{"location":"#decorators","title":"Decorators","text":"<p>The <code>.decorators</code> module provides useful decorators to enhance your socket handlers.</p>"},{"location":"#log_exceptions","title":"<code>log_exceptions</code>","text":"<p>Logs exceptions and optionally re-raises them.</p> <pre><code>from kn_sock.decorators import log_exceptions\n\n@log_exceptions(raise_error=True)\ndef handle_message(data, addr, client_socket):\n    \"\"\"\n    Handle incoming messages with exception logging.\n\n    Args:\n        data (bytes): The data received from the client.\n        addr (tuple): The address of the client.\n        client_socket (socket.socket): The client socket.\n    \"\"\"\n    # Your message handling code here\n    pass\n</code></pre>"},{"location":"#retry","title":"<code>retry</code>","text":"<p>Retries a function upon failure, with a delay between attempts.</p> <pre><code>from kn_sock.decorators import retry\n\n@retry(retries=3, delay=1.0, exceptions=(Exception,))\ndef handle_message(data, addr, client_socket):\n    \"\"\"\n    Handle incoming messages with retry logic.\n\n    Args:\n        data (bytes): The data received from the client.\n        addr (tuple): The address of the client.\n        client_socket (socket.socket): The client socket.\n    \"\"\"\n    # Your message handling code here\n    pass\n</code></pre>"},{"location":"#measure_time","title":"<code>measure_time</code>","text":"<p>Measures and prints the execution time of the wrapped function.</p> <pre><code>from kn_sock.decorators import measure_time\n\n@measure_time\ndef handle_message(data, addr, client_socket):\n    \"\"\"\n    Handle incoming messages with execution time measurement.\n\n    Args:\n        data (bytes): The data received from the client.\n        addr (tuple): The address of the client.\n        client_socket (socket.socket): The client socket.\n    \"\"\"\n    # Your message handling code here\n    pass\n</code></pre>"},{"location":"#ensure_json_input","title":"<code>ensure_json_input</code>","text":"<p>Validates that the first argument is a valid JSON object (dict or str). Raises <code>InvalidJSONError</code> otherwise.</p> <pre><code>from kn_sock.decorators import ensure_json_input\n\n@ensure_json_input\ndef handle_json_message(data, addr, client_socket):\n    \"\"\"\n    Handle incoming JSON messages with input validation.\n\n    Args:\n        data (dict): The JSON data received from the client.\n        addr (tuple): The address of the client.\n        client_socket (socket.socket): The client socket.\n    \"\"\"\n    # Your JSON message handling code here\n    pass\n</code></pre>"},{"location":"#utilities","title":"Utilities","text":"<p>The <code>.utils</code> module provides various utility functions to assist with socket programming.</p>"},{"location":"#network-utilities","title":"Network Utilities","text":""},{"location":"#get_free_port","title":"<code>get_free_port</code>","text":"<p>Finds a free port for TCP binding (useful for tests).</p> <pre><code>from kn_sock.utils import get_free_port\n\nport = get_free_port()\nprint(f\"Free port: {port}\")\n</code></pre>"},{"location":"#get_local_ip","title":"<code>get_local_ip</code>","text":"<p>Returns the local IP address of the current machine.</p> <pre><code>from kn_sock.utils import get_local_ip\n\nip = get_local_ip()\nprint(f\"Local IP: {ip}\")\n</code></pre>"},{"location":"#file-utilities","title":"File Utilities","text":""},{"location":"#chunked_file_reader","title":"<code>chunked_file_reader</code>","text":"<p>Yields file data in chunks for streaming transfer.</p> <pre><code>from kn_sock.utils import chunked_file_reader\n\nfor chunk in chunked_file_reader(\"path/to/your/file.txt\"):\n    # Process each chunk\n    pass\n</code></pre>"},{"location":"#recv_all","title":"<code>recv_all</code>","text":"<p>Receives exactly <code>total_bytes</code> from a socket.</p> <pre><code>from kn_sock.utils import recv_all\n\ndata = recv_all(client_socket, total_bytes)\n</code></pre>"},{"location":"#progress-display","title":"Progress Display","text":""},{"location":"#print_progress","title":"<code>print_progress</code>","text":"<p>Prints file transfer progress in percentage.</p> <pre><code>from kn_sock.utils import print_progress\n\nprint_progress(received_bytes, total_bytes)\n</code></pre>"},{"location":"#json-utility","title":"JSON Utility","text":""},{"location":"#is_valid_json","title":"<code>is_valid_json</code>","text":"<p>Checks whether a string is valid JSON.</p> <pre><code>from kn_sock.utils import is_valid_json\n\nif is_valid_json(json_string):\n    print(\"Valid JSON\")\nelse:\n    print(\"Invalid JSON\")\n</code></pre>"},{"location":"#errors","title":"Errors","text":"<p>The <code>.errors</code> module defines custom exceptions for the <code>kn_sock</code> library.</p>"},{"location":"#easysocketerror","title":"<code>EasySocketError</code>","text":"<p>Base exception for all <code>kn_sock</code> errors.</p> <pre><code>from kn_sock.errors import EasySocketError\n\ntry:\n    # Your code here\n    pass\nexcept EasySocketError as e:\n    print(f\"EasySocketError: {e}\")\n</code></pre>"},{"location":"#connection-related-errors","title":"Connection-related Errors","text":""},{"location":"#connectiontimeouterror","title":"<code>ConnectionTimeoutError</code>","text":"<p>Raised when a connection or read/write operation times out.</p> <pre><code>from kn_sock.errors import ConnectionTimeoutError\n\ntry:\n    # Your code here\n    pass\nexcept ConnectionTimeoutError as e:\n    print(f\"ConnectionTimeoutError: {e}\")\n</code></pre>"},{"location":"#portinuseerror","title":"<code>PortInUseError</code>","text":"<p>Raised when a specified port is already in use.</p> <pre><code>from kn_sock.errors import PortInUseError\n\ntry:\n    # Your code here\n    pass\nexcept PortInUseError as e:\n    print(f\"PortInUseError: {e}\")\n</code></pre>"},{"location":"#data-protocol-errors","title":"Data &amp; Protocol Errors","text":""},{"location":"#invalidjsonerror","title":"<code>InvalidJSONError</code>","text":"<p>Raised when a JSON message cannot be decoded.</p> <pre><code>from kn_sock.errors import InvalidJSONError\n\ntry:\n    # Your code here\n    pass\nexcept InvalidJSONError as e:\n    print(f\"InvalidJSONError: {e}\")\n</code></pre>"},{"location":"#unsupportedprotocolerror","title":"<code>UnsupportedProtocolError</code>","text":"<p>Raised when a requested protocol is not supported.</p> <pre><code>from kn_sock.errors import UnsupportedProtocolError\n\ntry:\n    # Your code here\n    pass\nexcept UnsupportedProtocolError as e:\n    print(f\"UnsupportedProtocolError: {e}\")\n</code></pre>"},{"location":"#file-transfer-errors","title":"File Transfer Errors","text":""},{"location":"#filetransfererror","title":"<code>FileTransferError</code>","text":"<p>Raised when file transfer fails.</p> <pre><code>from kn_sock.errors import FileTransferError\n\ntry:\n    # Your code here\n    pass\nexcept FileTransferError as e:\n    print(f\"FileTransferError: {e}\")\n</code></pre>"},{"location":"#available-functions","title":"Available Functions","text":""},{"location":"#tcp-functions","title":"TCP Functions","text":"<ul> <li><code>start_tcp_server(port, handler_func, host='0.0.0.0')</code></li> <li><code>start_threaded_tcp_server(port, handler_func, host='0.0.0.0')</code></li> <li><code>send_tcp_message(host, port, message)</code></li> <li><code>send_tcp_bytes(host, port, data)</code></li> <li><code>start_async_tcp_server(port, handler_func, host='0.0.0.0')</code></li> <li><code>send_tcp_message_async(host, port, message)</code></li> </ul>"},{"location":"#udp-functions","title":"UDP Functions","text":"<ul> <li><code>start_udp_server(port, handler_func, host='0.0.0.0')</code></li> <li><code>send_udp_message(host, port, message)</code></li> <li><code>start_udp_server_async(port, handler_func, host='0.0.0.0')</code></li> <li><code>send_udp_message_async(host, port, message)</code></li> </ul>"},{"location":"#json-functions","title":"JSON Functions","text":"<ul> <li><code>start_json_server(port, handler_func, host='0.0.0.0')</code></li> <li><code>send_json(host, port, data)</code></li> </ul>"},{"location":"#file-transfer-functions","title":"File Transfer Functions","text":"<ul> <li><code>send_file(host, port, filepath)</code></li> <li><code>start_file_server(port, save_dir, host='0.0.0.0')</code></li> <li><code>send_file_async(host, port, filepath)</code></li> <li><code>start_file_server_async(port, save_dir, host='0.0.0.0')</code></li> </ul>"},{"location":"#decorators_1","title":"Decorators","text":"<ul> <li><code>log_exceptions(raise_error=True)</code></li> <li><code>retry(retries=3, delay=1.0, exceptions=(Exception,))</code></li> <li><code>measure_time(func)</code></li> <li><code>ensure_json_input(func)</code></li> </ul>"},{"location":"#utilities_1","title":"Utilities","text":"<ul> <li><code>get_free_port()</code></li> <li><code>get_local_ip()</code></li> <li><code>chunked_file_reader(filepath, chunk_size=4096)</code></li> <li><code>recv_all(sock, total_bytes)</code></li> <li><code>print_progress(received_bytes, total_bytes)</code></li> <li><code>is_valid_json(json_string)</code></li> </ul>"},{"location":"#live-streaming-functions","title":"Live Streaming Functions","text":"<ul> <li><code>start_live_stream(port, video_path, host='0.0.0.0', audio_port=None)</code></li> <li><code>connect_to_live_server(ip, port, audio_port=None)</code></li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please read the contributing guidelines first.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE  file for details.</p>"}]}